import sys
import codecs
from pathlib import Path
from PyQt5 import QtCore, QtGui, QtWidgets
from QCodeEditor import QCodeEditor

class Ui_augusApp(QtWidgets.QMainWindow):
    def __init__(self, parent = None):
        super().__init__(None)
        self.setupUi()
        self.show()

    def setupUi(self):
        self.setObjectName("augusApp")
        self.resize(800, 600)
        self.setWindowIcon(QtGui.QIcon('augus.ico'))

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")
        # -- ORGANIZADOR CENTRAL
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        # -- ORGANIZADOR INFERIOR
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        # -- TEXTO INDICANDO LA FILA ACTUAL EN EL TEXTO
        self.txtRow = QtWidgets.QLineEdit(self.centralwidget)
        self.txtRow.setEnabled(False)
        self.txtRow.setMinimumSize(QtCore.QSize(50, 0))
        self.txtRow.setMaximumSize(QtCore.QSize(200, 16777215))
        self.txtRow.setText("")
        self.txtRow.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.txtRow.setObjectName("txtRow")
        self.gridLayout_2.addWidget(self.txtRow, 0, 5, 1, 1)
        # -- ETIQUETA PARA LA COLUMNA DE TEXTO
        self.lblCol = QtWidgets.QLabel(self.centralwidget)
        self.lblCol.setTextFormat(QtCore.Qt.PlainText)
        self.lblCol.setWordWrap(False)
        self.lblCol.setObjectName("lblCol")
        self.gridLayout_2.addWidget(self.lblCol, 0, 2, 1, 1)
        # -- ETIQUETA PARA LA FILA DE TEXTO
        self.lblRow = QtWidgets.QLabel(self.centralwidget)
        self.lblRow.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lblRow.setTextFormat(QtCore.Qt.PlainText)
        self.lblRow.setObjectName("lblRow")
        self.gridLayout_2.addWidget(self.lblRow, 0, 4, 1, 1)
        # -- TEXTO INDICANDO LA COLUMNA ACTUAL EN EL TEXTO
        self.txtCol = QtWidgets.QLineEdit(self.centralwidget)
        self.txtCol.setEnabled(False)
        self.txtCol.setMinimumSize(QtCore.QSize(50, 0))
        self.txtCol.setMaximumSize(QtCore.QSize(200, 16777215))
        self.txtCol.setText("")
        self.txtCol.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.txtCol.setObjectName("txtCol")
        self.gridLayout_2.addWidget(self.txtCol, 0, 3, 1, 1)
        # -- ETIQUETA QUE INDICA EL ESTADO ACTUAL DE LA APLICACION
        self.lblStatus = QtWidgets.QLabel(self.centralwidget)
        self.lblStatus.setObjectName("lblStatus")
        self.gridLayout_2.addWidget(self.lblStatus, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(700, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 1, 0, 1, 1)
        # -- SEPERADOR INPUT/OUTPUT
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        # -- ENTRADA DE CODIGO
        self.txtInput = QCodeEditor(self.splitter)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtInput.setFont(font)
        self.txtInput.setObjectName("txtInput")
        # -- SALIDA DE CODIGO (CMD)
        self.txtOutput =  QtWidgets.QPlainTextEdit(self.splitter)
        self.txtOutput.setMinimumSize(QtCore.QSize(0, 100))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.txtOutput.setFont(font)
        self.txtOutput.setUndoRedoEnabled(True)
        self.txtOutput.setObjectName("txtOutput")
        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)
        self.setCentralWidget(self.centralwidget)
        # -- BARRA DE MENÃš
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 962, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuRun = QtWidgets.QMenu(self.menubar)
        self.menuRun.setObjectName("menuRun")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.setMenuBar(self.menubar)
        self.actionNew = QtWidgets.QAction(self)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(self)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(self)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(self)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionExit = QtWidgets.QAction(self)
        self.actionExit.setObjectName("actionExit")
        self.actionUndo = QtWidgets.QAction(self)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtWidgets.QAction(self)
        self.actionRedo.setObjectName("actionRedo")
        self.actionCut = QtWidgets.QAction(self)
        self.actionCut.setObjectName("actionCut")
        self.actionCopy = QtWidgets.QAction(self)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(self)
        self.actionPaste.setObjectName("actionPaste")
        self.actionFind = QtWidgets.QAction(self)
        self.actionFind.setObjectName("actionFind")
        self.actionReplace = QtWidgets.QAction(self)
        self.actionReplace.setObjectName("actionReplace")
        self.actionAbout = QtWidgets.QAction(self)
        self.actionAbout.setObjectName("actionAbout")
        self.actionDark_Mode = QtWidgets.QAction(self)
        self.actionDark_Mode.setCheckable(True)
        self.actionDark_Mode.setObjectName("actionDark_Mode")
        self.actionAscendent_Debugging = QtWidgets.QAction(self)
        self.actionAscendent_Debugging.setObjectName("actionAscendent_Debugging")
        self.actionAscendent_Without_Debugging = QtWidgets.QAction(self)
        self.actionAscendent_Without_Debugging.setObjectName("actionAscendent_Without_Debugging")
        self.actionDescendent_Without_Debugging = QtWidgets.QAction(self)
        self.actionDescendent_Without_Debugging.setObjectName("actionDescendent_Without_Debugging")
        self.actionRestart_Debugging = QtWidgets.QAction(self)
        self.actionRestart_Debugging.setEnabled(False)
        self.actionRestart_Debugging.setObjectName("actionRestart_Debugging")
        self.actionStop_Debugging = QtWidgets.QAction(self)
        self.actionStop_Debugging.setEnabled(False)
        self.actionStop_Debugging.setObjectName("actionStop_Debugging")
        self.actionStep_Into = QtWidgets.QAction(self)
        self.actionStep_Into.setEnabled(False)
        self.actionStep_Into.setObjectName("actionStep_Into")
        self.actionContinue = QtWidgets.QAction(self)
        self.actionContinue.setEnabled(False)
        self.actionContinue.setObjectName("actionContinue")
        self.actionGo_To = QtWidgets.QAction(self)
        self.actionGo_To.setObjectName("actionGo_To")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFind)
        self.menuEdit.addAction(self.actionReplace)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionGo_To)
        self.menuRun.addAction(self.actionAscendent_Debugging)
        self.menuRun.addAction(self.actionAscendent_Without_Debugging)
        self.menuRun.addAction(self.actionDescendent_Without_Debugging)
        self.menuRun.addSeparator()
        self.menuRun.addAction(self.actionRestart_Debugging)
        self.menuRun.addAction(self.actionStop_Debugging)
        self.menuRun.addAction(self.actionStep_Into)
        self.menuRun.addAction(self.actionContinue)
        self.menuTools.addAction(self.actionDark_Mode)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuRun.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        
        self.setWindowTitle("Augus 0.1 - fileName")
        self.lblCol.setText("Column")
        self.lblRow.setText("Row")
        self.lblStatus.setText("Not Saved")
        self.menuFile.setTitle("File")
        self.menuEdit.setTitle("Edit")
        self.menuRun.setTitle("Run")
        self.menuTools.setTitle("Tools")
        self.menuHelp.setTitle("Help")
        self.actionNew.setText("New")
        self.actionNew.setShortcut("Ctrl+N")
        self.actionOpen.setText("Open")
        self.actionOpen.setShortcut("Ctrl+O")
        self.actionSave.setText("Save")
        self.actionSave.setShortcut("Ctrl+S")
        self.actionSave_As.setText("Save As")
        self.actionSave_As.setShortcut("Ctrl+Alt+S")
        self.actionExit.setText("Exit")
        self.actionUndo.setText("Undo")
        self.actionUndo.setShortcut("Ctrl+Z")
        self.actionRedo.setText("Redo")
        self.actionRedo.setShortcut("Ctrl+Y")
        self.actionCopy.setText("Copy")
        self.actionPaste.setText("Paste")
        self.actionCut.setText("Cut")
        self.actionCut.setText("Cut")
        self.actionCut.setShortcut("Ctrl+X")
        self.actionCopy.setText("Copy")
        self.actionCopy.setShortcut("Ctrl+C")
        self.actionPaste.setText("Paste")
        self.actionPaste.setShortcut("Ctrl+V")
        self.actionFind.setText("Find")
        self.actionFind.setShortcut("Ctrl+F")
        self.actionReplace.setText("Replace")
        self.actionReplace.setShortcut("Ctrl+H")
        self.actionAbout.setText("About")
        
        self.actionDark_Mode.setText("Dark Mode")
        self.actionAscendent_Debugging.setText("Ascendent Debugging")
        self.actionAscendent_Debugging.setShortcut("F5")
        self.actionAscendent_Without_Debugging.setText("Ascendent Without Debugging")
        self.actionAscendent_Without_Debugging.setShortcut("Ctrl+F5")
        self.actionDescendent_Without_Debugging.setText("Descendent Without Debugging")
        self.actionDescendent_Without_Debugging.setShortcut("Ctrl+Alt+F5")
        self.actionRestart_Debugging.setText("Restart Debugging")
        self.actionRestart_Debugging.setShortcut("Ctrl+Shift+F5")
        self.actionStop_Debugging.setText("Stop Debugging")
        self.actionStop_Debugging.setShortcut("Shift+F5")
        self.actionStep_Into.setText("Step Into")
        self.actionStep_Into.setShortcut("F11")
        self.actionContinue.setText("Continue")
        self.actionContinue.setShortcut("F6")
        self.actionGo_To.setText("Go To")
        self.actionGo_To.setShortcut("Ctrl+G")

        self.actionNew.triggered.connect(self.newFile_action)
        self.actionOpen.triggered.connect(self.openFile_action)
        self.actionSave.triggered.connect(self.saveFile_action)
        self.actionSave_As.triggered.connect(self.saveFileAs_action)

    def newFile_action(self):
        msg = QtWidgets.QMessageBox.question(
            self,'Nuevo archivo',
            'El cÃ³digo actual se perderÃ¡. Â¿Desea guardar antes?',
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Cancel)
        if msg == QtWidgets.QMessageBox.Yes:
            # Is there a file reference?
            # yes -> upload file 
            # no -> call savefileas
            pass
        elif msg == QtWidgets.QMessageBox.No:
            self.txtInput.setPlainText("")
            self.setWindowTitle('Augus 0.1 - untitled')
            self.lblStatus.setText("Not saved")
            # Clear file reference

    def saveFile_action(self):
        pass
    
    def saveFileAs_action(self):
        pass

    def openFile_action(self):
        fileName = QtWidgets.QFileDialog.getOpenFileName(self, 'Open', str(Path.home()), "Augus files (*.aug)")
        if fileName[0]:
            with codecs.open(fileName[0],'r', encoding='utf8') as f:
                self.txtInput.setPlainText(f.read())

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    u = Ui_augusApp()
    sys.exit(app.exec_())